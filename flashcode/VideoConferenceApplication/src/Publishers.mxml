<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="138" height="108"  >
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.MessagePopUp;
			
			import flash.display.MovieClip;
			import flash.events.ActivityEvent;
			import flash.events.MouseEvent;
			import flash.events.NetStatusEvent;
			import flash.media.Camera;
			import flash.media.Microphone;
			import flash.media.Video;
			import flash.net.NetConnection;
			import flash.net.NetStream;
			
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.utils.ObjectUtil;
			
			var nc:NetConnection;
			var ns:NetStream;
			var video:Video;
			var camera:Camera;
			var selectedMic:Microphone;
			
			private var alert:MessagePopUp;
			private var timer:Timer;
			private var meta:Object;
			private var busyFlag:Boolean=false;
			private var Audiotimer : Timer;
			private var micFlag:Boolean=false;
			private var timercheckCam:Timer;
			
			public function initPublisher():void {
				trace("Okay, let's connect now");
				timer = new Timer(4000,1);				
				timer.addEventListener(TimerEvent.TIMER_COMPLETE,activationTimeout);
				
			
			
			/* 	timercheckCam = new Timer(5000,0);				
				timercheckCam.addEventListener(TimerEvent.TIMER,CheckCamera); */
				
				
				Audiotimer = new Timer(10000,1);
				Audiotimer.addEventListener(TimerEvent.TIMER_COMPLETE,onAudioTimer);
				
				
				nc = new NetConnection();
				nc.client=this;
				nc.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
				nc.connect("rtmpe://zi0hdi07fe.rtmphost.com/telecon");
			}
			
			
			private function CheckCamera(event:TimerEvent):void{
			trace("CHECK CAMERA PER SECOND:- "+"quality: "+camera.quality+" fps: "+camera.fps+" currentFPS: "+camera.currentFPS+" motionLevel: "
					+camera.motionLevel+" bandwidth: "+camera.bandwidth+" activityLevel: "+camera.activityLevel+" keyFrameInterval: "
					+camera.keyFrameInterval+" motionLevel: "+camera.motionLevel+" motionTimeout: "+camera.motionTimeout);	
			}
			
			private function ns_onMetaData(item:Object):void {
				trace("meta");
				trace(ObjectUtil.toString(item));
				
				/*
				meta = item;
				// Resize Video object to same size as meta data.
				video.width = item.width;
				video.height = item.height;
				// Resize UIComponent to same size as Video object.
				uic.width = video.width;
				uic.height = video.height;
				panel.title = "framerate: " + item.framerate;
				panel.visible = true;
				*/
			}
			
			private function ns_onCuePoint(item:Object):void {
				trace("cue");
			}
			/*
			* Connect and start publishing the live stream
			*/
		
			/*
			* Disconnect from the server
			*/
			private function stopHandler(event:MouseEvent):void {
				trace("Now we're disconnecting");
				nc.close();
			}
			
			/*
			* Clear the MetaData associated with the stream
			*/
	
			
			public function closeWindow():void 
			{ 
				var url:String = "javascript:window.opener = self;window.close();"; 
				var urlReq:URLRequest = new URLRequest(url); 
				navigateToURL(urlReq,"_self"); 
			} 

			public function alertListener(event:CloseEvent):void{
				if (event.detail==Alert.OK) {
					closeWindow();
				}

			}
			
			private function netStatusHandler(event:NetStatusEvent):void
			{
				trace("connected is: " + nc.connected );
				trace("event.info.level: " + event.info.level);
				trace("event.info.code: " + event.info.code);
				
				
				if ((event.info.code == "NetConnection.Connect.Failed")||(event.info.code == "NetConnection.Connect.Closed") || (event.info.code=="NetConnection.Connect.Rejected")){
					trace("If Internet Goes Off : " + event.info.code);				
					//alert=Alert.show("You're not connected to the internet.", "Alert!",Alert.OK ,null , alertListener, null, Alert.OK);
					
					alert = PopUpManager.createPopUp(this.parent, MessagePopUp, true) as MessagePopUp;
					alert.messageTxt.text="You're not connected to the internet.";
					FlexGlobals.topLevelApplication.closeWindowFlag=true;
					PopUpManager.centerPopUp(alert);
					FlexGlobals.topLevelApplication.minuteTimer.stop();
					
				}
				
				switch (event.info.code)
				{
					case "NetConnection.Connect.Success":
					//	trace("Congratulations! you're connected");
						publishLiveStream();
						//Alert.show("Internet Disconnected!", "Alert",Alert.OK ,null , alertListener, null, Alert.OK);
						break;
					case "NetConnection.Connect.Rejected":
						//trace ("Oops! the connection was rejected");
						break;
					
					case "NetStream.Play.Stop":
						//trace("The stream has finished playing");
						break;
					case "NetStream.Play.StreamNotFound":
						//trace("The server could not find the stream you specified"); 
						break;
					case "NetStream.Publish.Start":
						
					
						break;
					
					case "NetStream.Publish.BadName":
						//trace("The stream name is already used");
						break;
				}
			}
			
			public function onBWDone():void{
			}
			
	
			/*
			* Create a live stream, attach the camera and microphone, and
			* publish it to the local server
			*/
			private function publishLiveStream():void {
				ns = new NetStream(nc);
				ns.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
				var nsClient:Object = {};
				nsClient.onMetaData = ns_onMetaData;
				nsClient.onCuePoint = ns_onCuePoint;
				ns.client = nsClient;
				
				camera = Camera.getCamera();
				
				
				
				if (camera != null){
					//timercheckCam.start();
					
					//camera.setQuality(98304, 90)
					
					camera.setQuality(0, 100)						
					camera.addEventListener(ActivityEvent.ACTIVITY, activityHandler);									
					camera.addEventListener(StatusEvent.STATUS, cameraBusyStatus);
					
					
					video = new Video();
					video.smoothing=true;
					video.width=136;
					video.height=106;
					video.attachCamera(camera);
					
					ns.attachCamera(camera);
					uic.addChild(video);
					
				}else{
					
					alert = PopUpManager.createPopUp(this.parent, MessagePopUp, true) as MessagePopUp;
					alert.messageTxt.text="Your web-camera does not appear to be active. Please check.";
					PopUpManager.centerPopUp(alert);
				}
				
				try{
					selectedMic = Microphone.getEnhancedMicrophone();
				if (selectedMic != null) {					
					var options : MicrophoneEnhancedOptions = new MicrophoneEnhancedOptions();
					options.mode = MicrophoneEnhancedMode.FULL_DUPLEX;
					options.autoGain = false;
					options.echoPath = 128;
					options.nonLinearProcessing = true;
					selectedMic.enhancedOptions = options;		
					// settings
					 /* selectedMic.setLoopBack(false);
					selectedMic.setUseEchoSuppression(true); // being ignored but setting it anyway
					selectedMic.encodeQuality = 8;
					selectedMic.enableVAD = true; */
					selectedMic.encodeQuality = 8;
					//selectedMic.codec = SoundCodec.SPEEX;
					selectedMic.framesPerPacket = 1;	
					
					selectedMic.setSilenceLevel(0); 
					// selectedMic.gain = 50;	
					//trace("isVoiceDetected"+options.isVoiceDetected);
					selectedMic.rate = 8;  
					selectedMic.addEventListener(SampleDataEvent.SAMPLE_DATA,sampleHandler);
					selectedMic.addEventListener(ActivityEvent.ACTIVITY,audioActivityHandler);
					selectedMic.addEventListener(StatusEvent.STATUS,audioStatusHandler);
					
					ns.attachAudio(selectedMic);
					FlexGlobals.topLevelApplication.maincanvas.alpha=0.05;
					}
				}catch(e:Error){
					  //  selectedMic = Microphone.getMicrophone();
					}
				
			
			if (selectedMic == null) 
			{  
				alert = PopUpManager.createPopUp(this.parent, MessagePopUp, true) as MessagePopUp;
				alert.messageTxt.text="Your microphone does not appear to be active. Please check.";
				PopUpManager.centerPopUp(alert);
				return;
			}
			else
			{
				/* selectedMic.addEventListener(SampleDataEvent.SAMPLE_DATA,sampleHandler);
				selectedMic.addEventListener(ActivityEvent.ACTIVITY,audioActivityHandler);
				selectedMic.addEventListener(StatusEvent.STATUS,audioStatusHandler); */
			
			}
			
			
				if (camera != null || selectedMic != null){
					// start publishing
					// triggers NetStream.Publish.Start
					//ns.publish(FlexGlobals.topLevelApplication.localSname, "live");
				} else {
					//trace("Please check your camera and microphone");
				}
			} 
			
		
			
			private function cameraBusyStatus(event:StatusEvent):void{
			//	trace("StatusEvent: "+event.code);
			/* 	if(event.code=="Camera.Unmuted"){
					FlexGlobals.topLevelApplication.webCamOn=true;
					ns.publish(FlexGlobals.topLevelApplication.localSname, "live");
					
					if(FlexGlobals.topLevelApplication.ChecksubscriberStream==true){
						FlexGlobals.topLevelApplication.minuteTimer.start();
					}
				} */	
			
				timer.start();		
				FlexGlobals.topLevelApplication.maincanvas.alpha=1;
			}
			private function activityHandler(e:ActivityEvent):void {
				
			/* 	trace("ACTIVITY HANDLER:- "+"quality: "+camera.quality+" fps: "+camera.fps+" currentFPS: "+camera.currentFPS+"motionLevel: "
				+camera.motionLevel+" bandwidth: "+camera.bandwidth+" activityLevel: "+camera.activityLevel+" keyFrameInterval: "
				+camera.keyFrameInterval+" motionLevel: "+camera.motionLevel+" motionTimeout: "+camera.motionTimeout);	  */
				if(busyFlag==false && camera.activityLevel==100){
					busyFlag=true;	
					
						FlexGlobals.topLevelApplication.webCamOn=true;
						ns.publish(FlexGlobals.topLevelApplication.localSname, "live");
						
						if(FlexGlobals.topLevelApplication.ChecksubscriberStream==true){
							FlexGlobals.topLevelApplication.minuteTimer.start();
						}
					
					//Audiotimer.start();
					timer.stop();				
					timer.removeEventListener(TimerEvent.TIMER_COMPLETE,activationTimeout);
				}
			
			}
			protected function activationTimeout(e:TimerEvent):void{
				/* 	Alert.show("TIMER:- "+"quality"+camera.quality+"fps"+camera.fps+"currentFPS"+camera.currentFPS+"motionLevel"+
				camera.motionLevel+"bandwidth"+camera.bandwidth+"activityLevel"+camera.activityLevel
				+"keyFrameInterval"+camera.keyFrameInterval+"motionLevel"+camera.motionLevel+"motionTimeout"+camera.motionTimeout);	 */
				
				//trace("timermotionLevel"+camera.motionLevel+"camera.activityLevel"+camera.activityLevel);		
				if(busyFlag==false){
					alert = PopUpManager.createPopUp(this.parent, MessagePopUp, true) as MessagePopUp;
					alert.messageTxt.text="Your camera appears to be in use by another application. Please check.";
					PopUpManager.centerPopUp(alert);
					//trace(camera.motionLevel);		
					
				}
				
			}
		
			private function sampleHandler(e:SampleDataEvent):void{
				
				
				if(selectedMic.activityLevel >0){
				//	Alert.show(selectedMic.activityLevel.toString());
					micFlag=true;
					Audiotimer.stop();
					Audiotimer.removeEventListener(TimerEvent.TIMER_COMPLETE,onAudioTimer);
				}
				
				trace("sampleHandler=  "+"selectedMic.activityLevel=  "+selectedMic.activityLevel +"muted :"+selectedMic.useEchoSuppression)
			}
			private function audioActivityHandler(e:ActivityEvent):void{
				/* micFlag=true;
				Audiotimer.stop();
				Audiotimer.removeEventListener(TimerEvent.TIMER_COMPLETE,onAudioTimer); */
				trace("audioActivityHandler=  "+"selectedMic.activityLevel"+selectedMic.activityLevel +"muted :"+selectedMic.useEchoSuppression)
			}
			
			private function audioStatusHandler(e:StatusEvent):void{
				Audiotimer.start();
				
				trace("audioStatusHandler=  "+"status: muted=" + selectedMic.muted + ", activityLevel=" + selectedMic.activityLevel);
			}
			
			protected function onAudioTimer(e:TimerEvent):void
			{  trace(micFlag);
				//Alert.show(micFlag.toString());
				if(micFlag==false){		
					alert = PopUpManager.createPopUp(this.parent, MessagePopUp, true) as MessagePopUp;
					alert.messageTxt.text="Your microphone does not appear to be active. Please check.";
					PopUpManager.centerPopUp(alert);
					Audiotimer.stop();
				} 
			}
		]]>
	</fx:Script>
	
	<mx:UIComponent id="uic"  width="136" height="106" />
	
	
</s:BorderContainer>
