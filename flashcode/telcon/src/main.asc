application.allowDebug = false;
var clientObjList = new Object();
var cClient,pClient,msg,tempStream;
application.onConnect = function(clientObj,sn1,sn2)
{
	sn2 = (sn2 == "null" || sn2 == undefined || sn2 == "undefined")? null:sn2;
	if(clientObj.protocol == "rtmpe" || clientObj.protocol == "rtmpte")
	{
		application.acceptConnection(clientObj);
		clientObj.localSName = sn1;
		clientObj.liveSName = sn2;
		if(clientObjList[clientObj.localSName] == undefined)
			{
			if((clientObj.liveSName != null) && (clientObjList[clientObj.liveSName] != undefined))
				{
					tempStream = Stream.get(clientObj.liveSName);
					pClient = clientObjList[clientObj.liveSName];
					pClient.liveSName = clientObj.localSName;
					clientObj.call("asyncServerCall",null,("VideoRefresh:"+clientObj.liveSName));
					pClient.call("asyncServerCall",null,("VideoRefresh:"+pClient.liveSName));
				}
				else if(clientObj.liveSName == null)
				{
					for(var p in clientObjList)
					{
						if(clientObjList[p] != undefined)
						{
							if(clientObjList[p].liveSName == clientObj.localSName)
							{
								pClient = clientObjList[p];
								clientObj.liveSName = pClient.localSName;
								msg = "VideoRefresh:"+clientObj.liveSName;
								clientObj.call("asyncServerCall",null,msg);
								break;
							}
						}
					}
				}
				clientObjList[clientObj.localSName] = clientObj;
			}
			return true;
		}
	return false
}
application.onDisconnect = function(clientObj)
{
	if(clientObjList[clientObjList[clientObj.localSName].liveSName]!= undefined)
	{
		clientObjList[clientObjList[clientObj.localSName].liveSName].call("asyncServerCall",null,("stopShare:"+clientObj.localSName));
	}
	removeStream(clientObj.localSName);
	clientObjList[clientObj.localSName] = null;
	clientObjList[clientObj.localSName] = undefined;
}

	Client.prototype.stopShare = function (streamName){
		cClient = clientObjList[streamName];
		if(cClient.liveSName != null && cClient.liveSName != "null")
		{
			pClient = clientObjList[cClient.liveSName];
			if(clientObjList[cClient.liveSName]!= undefined)
			{
				msg = "stopShare:"+pClient.liveSName;
				pClient.call("asyncServerCall",null,msg);
			}
		}
	}
Client.prototype.shareVedio = function (streamName){
	cClient = clientObjList[streamName];
	if(cClient.liveSName != null && cClient.liveSName != "null")
	{
		if(clientObjList[cClient.liveSName]!= undefined)
		{
			pClient = clientObjList[cClient.liveSName];
			msg = "VideoRefresh:"+pClient.liveSName;
			pClient.call("asyncServerCall",null,msg);
		}
	}
}
Client.prototype.delStream = function (selectedName){
	removeStream(selectedName);
}
function removeStream(streamName)
{
	tempStream = Stream.get(streamName);
	if(tempStream != undefined && tempStream != null)
	{
		tempStream.clear();
		tempStream = null;
	}
}