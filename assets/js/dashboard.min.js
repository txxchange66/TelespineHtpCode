var Dashboard ={properties:{},init:function(properties){Dashboard.console.log("Loading Dashboard...");this.properties= properties;$("#loading").css("visibility","visible");Dashboard.load();},load:function(){var len= this.properties.components.length;Dashboard.console.log("Loading Dashboard Components ("+len+")");var base = this.properties;for(c=0;c<len;c++){Dashboard.console.log("Reading Component: "+base.components[c].id);try{if(base.components[c].load && base.components[c].url!="void"){if(Dashboard.properties.loggingVerbose){Dashboard.console.log(base.components[c]);}Dashboard.console.log(" > Loading Component: ("+base.components[c].id+") from "+base.baseComponentURL + base.components[c].url,2);$.ajax({type:'GET',url:base.baseComponentURL + base.components[c].url,async:false,contentType:"application/text",success:function(response){$("#col_"+base.components[c].column).append(response+'<div class="clearfix"></div>');try{base.components[c].callback(base.components[c]);}catch(compError){Dashboard.console.log("Error executing function ("+base.components[c].callback+"): "+ compError);}},error:function(a,b,d){Dashboard.console.log(" > > Ajax Error when invoking "+base.components[c].id+": "+a+"; "+b+"; "+d);}});}else{Dashboard.console.log(" > Skip load component: "+ base.components[c].id);if(base.components[c].load && base.components[c].url=="void"){base.components[c].callback();}}}catch (ajaxErrorOuter){Dashboard.console.log(" > > Ajax Outer Error when invoking "+base.components[c].id+": "+ajaxErrorOuter.message);}}$("#loading").animate({width:"50%",height:"50%",top:"10px","margin-left":"-25%",opacity:0.0},1000);$("#loading").css("visibility","hidden");this.openSurvey();},openSurvey:function(justOpen){if(this.properties.survey){$('.notify').slideDown(400);}if(this.properties.survey && !this.properties.firstTimeUser){Dashboard.console.log(" > Open Survey Notification");}else if(justOpen){Dashboard.console.log("This is a first time user! \n > Open Welcome Window. ");$('#surveyModal').modal('show');}},getComponent:function(id){var base = this;try{var len= base.properties.components.length;for(c=0;c<len;c++){if(Dashboard.properties.loggingVerbose){Dashboard.console.log(" > > getComponent: "+base.properties.components[c].id,4);}if(base.properties.components[c].id == id){return base.properties.components[c];}}}catch(compE){base.console.log(" > getComponent(): Error "+compE);return null;}},showHelp:function(componentId){Dashboard.console.log("function :: showHelp("+componentId+")");$('div.dialog-help').hide();$('#dialog-'+componentId).show();},setStats:function(component){Dashboard.console.log(" Dashboard.setStats()");var percent = Math.round(component.data.goals[0]/component.data.goals[1]*100);$("#MyLogins").html(component.data.logins);$("#GoalsInterface").fadeOut();$("#GoalsInterface").html('<i class="fa fa-thumbs-up"></i><span class="plus">+</span><span class="percent">%</span>'+	'<input id="MyGoals" type="text" value="'+percent+'" class="circleChart" />');$("#GoalsInterface").fadeIn();$('.circleChart').each(function(){var circleColor = $(this).parent().css('color');$(this).knob({'min':0,'max':100,'readOnly':true,'width':120,'height':120,'fgColor':circleColor,'dynamicDraw':true,'thickness':0.2,'tickColorizeValues':true,'skin':'tron'});});},setPainLevel:function(){Dashboard.console.log("function :: setPainLevel");var newPain = $(".pain-level-control").html();$.gritter.add({title:'Pain Level Updated!',text:'Thank you! You have added a status update to your pain level. You set it to: '+newPain+' out of 10.',class_name:'my-sticky-class'});var c = Dashboard.getComponent("painMeter");c.data.pain += ","+newPain;$("#pailControl").hide();$(".pain-bubble").slideDown(300);try{$("#painLevelGraph").html('<div id="pain-graph" class="chart red" style="width:100%">'+c.data.pain+'</div>');var chartColor = $("#painLevelGraph").css('color');$("#painLevelGraph").sparkline(c.data.pain,{width:'90%',height:80,lineColor:chartColor,fillColor:false,spotColor:false,maxSpotColor:false,minSpotColor:false,spotRadius:2,lineWidth:2});if (jQuery.browser.mozilla){$("#painLevelGraph").css('MozTransform','scale(0.5,0.5)');$("#painLevelGraph").css('height','40px;').css('margin','-20px 0px -20px -25%');}else{$("#painLevelGraph").css('zoom',0.6);}}catch(pe){alert(pe);}},setPainLevelGraph:function(component){Dashboard.console.log("callback :: setPainLevelGraph()");try{$("#pain-graph").html(component.data.pain);$("#pain-level").slider({range:"min",value:3,min:0,max:10,slide:function( event,ui ){$(".pain-level-control").html(ui.value);}});}catch(e){Dashboard.console.log(" Error setPainLevelGraph : "+e);}},setFunctionalScore:function(component){Dashboard.console.log("callback :: setFunctionalScore()");try{var slen = component.data.scores.length-1;$("#currentFunctionalScore").html(component.data.scores[slen][0]+ "%");$("#currectPain").html( (component.data.scores[slen][1]/10) + "/10");for(var s=0;s<4;s++){this.setScore(component,s);}}catch(e){Dashboard.console.log(" Error setFunctionalScore : "+e);}},setScore:function(component,survey){try{var score = component.data.scores[survey];$('.f-score-'+(survey+1)).css('top',(100-score[0])+'%').html(score[0]+'%');Dashboard.console.log(" > > Functional Score from Survey "+(survey+1)+": "+ (100-score[0]));Dashboard.console.log(" > > Pain Score from Survey "+(survey+1)+": "+ (100-score[1]));$('.p-score-'+(survey+1)).css('top',(100-score[1])+'%').html(score[1]+'%');}catch (se){Dashboard.console.log("Expected Exception: "+ se+ " (This is expected because it is not yet set)");$('.f-bar-'+(survey+1)).html('Pending');}},updateGoal:function(obj){Dashboard.console.log(":: updateGoal");var StatisticsComponent = Dashboard.getComponent('goalsAndStatistics');Dashboard.console.log(" > Click Event [Goal Action] ");if ($(obj).find('i').attr('class') == 'fa fa-square-o'){$(obj).find('i').removeClass('fa-square-o').addClass('fa-check-square-o');$(obj).parent().parent().find('span').css({opacity:0.25});$(obj).parent().parent().find('.desc').css('text-decoration','line-through');Dashboard.console.log(" > > Set Status Action to Complete");StatisticsComponent.data.goals[0]+=1;}else{$(obj).find('i').removeClass('fa-check-square-o').addClass('fa-square-o');$(obj).parent().parent().find('span').css({opacity:1});$(obj).parent().parent().find('.desc').css('text-decoration','none');Dashboard.console.log(" > > Set Status Action to Active.");StatisticsComponent.data.goals[0]-=1;}Dashboard.setStats(StatisticsComponent);return false;},addGoal:function(){Dashboard.console.log(":: addGoal");if($("#AddGoal").val().length>0){var StatisticsComponent = Dashboard.getComponent('goalsAndStatistics');var goal = $("#AddGoal").val();var base = this;$("#AddGoal").val("");try{this.callService("goalsAndStatistics");}catch(serviceError){Dashboard.console.log("goalsAndStatistics.addGoal Service Error: "+serviceError);}$("#GoalsList").html($("#GoalsList").html().replace("{value}",goal));}else{$.gritter.add({title:'Add Goal',text:'We could not add the goal, it appears to be blank. Please try again.',class_name:'my-sticky-class'});}},callService:function(componentId){Dashboard.console.log("service :: callService for "+componentId);var base = this;if(base.getComponent(componentId)){$.ajax({type:'GET',url:base.properties.baseComponentURL + base.getComponent(componentId).service.url,async:false,contentType:"application/text",success:function(response){base.getComponent(componentId).service.callback(response);},error:function(ajaxErr){base.console.log(" > Ajax Error when invoking "+componentId+": "+ajaxErr.message);}});}},displayComponent:function(component,bool){component.load = bool;try{if(bool){$("#"+component.id+"_comp").show();}else{$("#"+component.id+"_comp").hide();}}catch(compErr){Dashboard.console.log(compErr);}},isMobile:function(){return (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent));},openMovie:function(a){try{var activity = Dashboard.getComponent("weeklyTimeline").data.activities[a];if(Dashboard.properties.loggingVerbose){Dashboard.console.log(" > > Activity: "+ activity,2);}$("#videoViewer").modal("show");}catch(ea){Dashboard.console.log(ea);}},console:{log:function(l,level){try{if(Dashboard.properties.logging){if(!level){if(console) console.log(l);}else if(level<=Dashboard.properties.loggingLevel){if(console) console.log(l);}}}catch(e){console.log(e);}}}}